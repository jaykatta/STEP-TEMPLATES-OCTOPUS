#!/bin/bash

echo "AWS Access Key: #{AWS_access_key}"
echo "AWS Secret Key: #{AWS_secret_key}"
echo "AWS Region: #{AWS_region}"
echo "AWS Account ID: #{AWS_account_id}"
echo "ECR Repository Name: #{ECR_repository_name}"
echo "ECS Task Definition Name: #{ECS_task_definition_name}"
echo "ECS Cluster Name: #{ECS_cluster_name}"
echo "ECS Service Name: #{ECS_service_name}"

# Ensure AWS variables are set
if [ -z "#{AWS_access_key}" ] || [ -z "#{AWS_secret_key}" ] || [ -z "#{AWS_region}" ] || [ -z "#{AWS_account_id}" ] || [ -z "#{ECR_repository_name}" ] || [ -z "#{ECS_task_definition_name}" ] || [ -z "#{ECS_cluster_name}" ] || [ -z "#{ECS_service_name}" ]; then
  echo "One or more required parameters are missing."
  exit 1
fi

echo "Configuring AWS CLI..."
aws configure set aws_access_key_id "#{AWS_access_key}"
aws configure set aws_secret_access_key "#{AWS_secret_key}"
aws configure set region "#{AWS_region}"
echo "AWS CLI configuration complete."

# Validate AWS region
if [ -z "#{AWS_region}" ]; then
  echo "Error: AWS region is not set"
  exit 1
fi

echo "Using AWS region: #{AWS_region}"

# Login to AWS ECR
echo "Logging into AWS ECR..."
aws ecr get-login-password --region "#{AWS_region}" | docker login --username AWS --password-stdin "#{AWS_account_id}.dkr.ecr.#{AWS_region}.amazonaws.com"

# List all images in the ECR repository and fetch the tags
echo "Listing images in ECR repository..."
IMAGE_TAGS=$(aws ecr list-images --repository-name "#{ECR_repository_name}" --query 'imageIds[*].imageTag' --output text --region "#{AWS_region}")

# If no images found, exit with an error
if [ -z "$IMAGE_TAGS" ]; then
  echo "No images found in the ECR repository: #{ECR_repository_name}"
  exit 1
fi

# Sort the tags to get the highest version (assuming version tags are in the format v1, v2, v3, etc.)
HIGHEST_TAG=$(echo "$IMAGE_TAGS" | tr '\t' '\n' | sort -V | tail -n 1)

echo "Highest version tag found: $HIGHEST_TAG"

# Pull the latest image from ECR using the highest version tag
echo "Pulling Docker image #{AWS_account_id}.dkr.ecr.#{AWS_region}.amazonaws.com/#{ECR_repository_name}:$HIGHEST_TAG..."
docker pull "#{AWS_account_id}.dkr.ecr.#{AWS_region}.amazonaws.com/#{ECR_repository_name}:$HIGHEST_TAG"

# Create the ECS task definition JSON file dynamically
TASK_DEF_JSON="/tmp/ecs-task-definition.json"
cat << EOF > $TASK_DEF_JSON
{
    "family": "#{ECS_task_definition_name}",
    "executionRoleArn": "arn:aws:iam::#{AWS_account_id}:role/ecsTaskExecutionRole",
    "networkMode": "awsvpc",
    "containerDefinitions": [
        {
            "name": "octopus",
            "image": "#{AWS_account_id}.dkr.ecr.#{AWS_region}.amazonaws.com/#{ECR_repository_name}:$HIGHEST_TAG",
            "essential": true,
            "memory": 512,
            "memoryReservation": 256,
            "cpu": 256,
            "logConfiguration": {
                "logDriver": "awslogs",
                "options": {
                    "awslogs-group": "/ecs/#{ECS_task_definition_name}",
                    "awslogs-region": "#{AWS_region}",
                    "awslogs-stream-prefix": "ecs"
                }
            }
        }
    ],
    "requiresCompatibilities": [
        "FARGATE"
    ],
    "cpu": "256",
    "memory": "512"
}
EOF

echo "ECS task definition JSON file created at $TASK_DEF_JSON."

# Register the ECS task definition using the JSON file
echo "Creating new revision of ECS Task Definition..."
NEW_TASK_DEF=$(aws ecs register-task-definition \
    --cli-input-json file://$TASK_DEF_JSON \
    --region "#{AWS_region}")

# Extract the task definition ARN from the output
TASK_DEF_ARN=$(echo "$NEW_TASK_DEF" | jq -r '.taskDefinition.taskDefinitionArn')

# Update the ECS service to use the new task definition
echo "Updating ECS Service with new Task Definition..."
aws ecs update-service \
    --cluster "#{ECS_cluster_name}" \
    --service "#{ECS_service_name}" \
    --task-definition "$TASK_DEF_ARN" \
    --region "#{AWS_region}"

echo "ECS Service successfully updated!"
